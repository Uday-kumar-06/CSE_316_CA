#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t lock;
pthread_cond_t cond_student, cond_teacher;
int pen = 0, paper = 0, question_paper = 0;
int count = 0, teacher_turn = 0;

void *teacher(void *arg) {
    while(1) {
        pthread_mutex_lock(&lock);
        while(count != 0 || teacher_turn == 1) {
            pthread_cond_wait(&cond_teacher, &lock);
        }
        printf("\nTeacher has put pen and paper on the table\n");
        pen = 1;
        paper = 1;
        teacher_turn = 1;
        pthread_cond_signal(&cond_student);
        pthread_mutex_unlock(&lock);
    }
}

void *student(void *arg) {
    int student_id = (int)arg;
    while(1) {
        pthread_mutex_lock(&lock);
        while((pen == 0 || paper == 0 || question_paper == 0) || (teacher_turn == 1)) {
            pthread_cond_wait(&cond_student, &lock);
        }
        pen = 0;
        paper = 0;
        question_paper = 0;
        if(student_id == 1) {
            question_paper = 1;
        }
        else if(student_id == 2) {
            paper = 1;
        }
        else {
            pen = 1;
        }
        printf("\nStudent %d has completed the assignment\n", student_id);
        count++;
        if(count == 3) {
            teacher_turn = 0;
            pthread_cond_signal(&cond_teacher);
            count = 0;
        }
        pthread_mutex_unlock(&lock);
    }
}

int main() {
    pthread_t t[4];
    pthread_mutex_init(&lock, NULL);
    pthread_cond_init(&cond_student, NULL);
    pthread_cond_init(&cond_teacher, NULL);
    int student_id[] = {1, 2, 3};
    pthread_create(&t[3], NULL, teacher, NULL);
    for(int i=0; i<3; i++) {
        pthread_create(&t[i], NULL, student, (void*)&student_id[i]);
    }
    for(int i=0; i<4; i++) {
        pthread_join(t[i], NULL);
    }
    pthread_mutex_destroy(&lock);
    pthread_cond_destroy(&cond_student);
    pthread_cond_destroy(&cond_teacher);
    return 0;
}
